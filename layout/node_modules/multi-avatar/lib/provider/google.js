'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _anyPromise = require('any-promise');

var _anyPromise2 = _interopRequireDefault(_anyPromise);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

_nodeFetch2.default.Promise = _anyPromise2.default;

module.exports = function () {
  function _class(googleId) {
    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;

    _classCallCheck(this, _class);

    this.googleId = googleId;
    this.timeout = timeout;

    this.pictureUrl = null;
    this.error = false;
  }

  _createClass(_class, [{
    key: 'providerName',
    value: function providerName() {
      return 'google';
    }
  }, {
    key: 'avatar',
    value: function avatar(size) {
      var _this = this;

      return new _anyPromise2.default(function (resolve, reject) {
        if (!_this.googleId) return reject(new Error('Google user ID is not specified'));
        if (!!_this.error) return reject(_this.error);

        if (!_this.pictureUrl) {
          (0, _nodeFetch2.default)('https://picasaweb.google.com/data/entry/api/user/' + _this.googleId + '?alt=json&fields=gphoto:thumbnail', {
            timeout: _this.timeout
          }).then(function (res) {
            if (res.status < 200 || res.status > 299) {
              if (res.status > 399 && res.status < 500) {
                _this.error = new Error(res.statusText);
              }
              return reject(new Error(res.statusText));
            }
            return res.json();
          }).then(function (data) {
            _this.pictureUrl = data.entry.gphoto$thumbnail.$t;
            return resolve(_this.pictureUrl);
          }).catch(function (err) {
            return reject(err);
          });
        } else {
          return resolve(_this.pictureUrl);
        }
      }).then(function (url) {
        return url.replace('s64', 's' + size);
      });
    }
  }]);

  return _class;
}();