<div style="margin-top: 40px; padding-bottom: 20px;">
	<Multiavatar Width="128px" Height="128px" AvatarId="@MultiAvatarUserName" />
</div>
<MudText Typo="Typo.h2" @bind-Value="UserFixed.Nombre" T="string" Label="Nombre"></MudText>
<EditForm Model="@UserFixed" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Nombre" 
                                  HelperText="Max. 8 characters"
                                  @bind-Value="UserFixed.Nombre"
                                  For="@(() => UserFixed.Nombre)" />

                    <MudTextField Label="Apellido"
                                  HelperText="Max. 8 characters"
                                  @bind-Value="UserFixed.Apellido"
                                  For="@(() => UserFixed.Apellido)" />

                    <MudTextField Label="Edad" 
                                  HelperText="Please, write a valid number"
                                  Class="mt-3"
                                  @bind-Value="UserFixed.Edad"
                                  For="@(() => UserFixed.Edad)"
                                  InputType="InputType.Number" Min="0" />
                  
                    <MudSelect @bind-Value="UserFixed.Sexo" T="string" Label="Sexo" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("Masculino")" />
                        <MudSelectItem Value="@("Femenine")" />
                        <MudSelectItem Value="@("Otros")" />
                    </MudSelect>

                    <MudTextField Label="Email" 
                                  HelperText="Please, write a valid email" 
                                  Class="mt-3"
                                  @bind-Value="UserFixed.Email"
                                  For="@(() => UserFixed.Email)" />

                    <MudTextField Label="Telefono" 
                                  HelperText="Please, write a valid telephone" 
                                  Class="mt-3"
                                  @bind-Value="UserFixed.Telefono"
                                  For="@(() => UserFixed.Telefono)"
                                  InputType="InputType.Telephone" />

                    <MudTextField Label="Contraseña"
                                  HelperText="Please, write a valid password"
                                  Class="mt-3"
                                  @bind-Value="UserPassword"
                                  For="@(() => UserPassword)"
                                  InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    @if (!string.IsNullOrWhiteSpace(UserPassword))
                    {
                        <MudButton OnClick="@(async(e) => await OnValidSubmit(context))" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Actualizar</MudButton>
                    }                    
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>
@code
{
    [Parameter] public User CurrentUser { get; set; }
    [Parameter] public EventCallback<string> OnRegister { get; set; } //definimos la variable OnRegister (es de tipo EventCallback) y la seteamos

    public JavascriptUser UserFixed { get; set; } = new JavascriptUser();
    private string MultiAvatarUserName { get; set; } = "UKNOWN";    
    private string UserPassword { get; set; } = "";
    bool success;
    private async Task OnValidSubmit(EditContext context)
    {
        UserFixed.Passwordseguro = UserPassword;
        UserFixed.authorize.Password = UserPassword;
        try
        {
            // Lógica para realizar la actualización del usuario
            // Por ejemplo:
            API.UserAPI api = new API.UserAPI();
            IActionResult result = await api.Put(UserFixed); //llamamos a la función PUT de la api UserAPI

            if (result is OkObjectResult) // Si el ObjectResult es de tipo OK  
            {
                await jsRuntime.InvokeAsync<string>("localStorage.removeItem", "Name");
                await jsRuntime.InvokeAsync<string>("localStorage.removeItem", "Password");
                SnackbarService.Add("Usuario modificado con existo", Severity.Success); 
                // Si la actualización es exitosa, puedes mostrar un mensaje de éxito
                // // y realizar otras acciones si es necesario
                success = true;
                await OnRegister.InvokeAsync("login");
            } 
            else if (result is UnauthorizedObjectResult || result is NoContentResult) //Si el ObjectResult es de tipo Unauthorized o está vacío 
            {
                SnackbarService.Add("Error al actualizar el campo. La contraseña es incorrecta", Severity.Error);
                success = false;
                
            }                                     
            await Task.CompletedTask;                        
        }
        catch (Exception ex)
        {
            // Si ocurre algún error durante la actualización, puedes manejarlo aquí
            // y mostrar un mensaje de error o realizar cualquier otra acción necesaria
            // Por ejemplo:
            // Mostrar un mensaje de error en el formulario            
            Console.WriteLine(ex.Message);
            await Task.CompletedTask;
        }

        //success = true;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    protected override async Task OnInitializedAsync()
    {
        MultiAvatarUserName = CurrentUser.Nombre;

        UserFixed = new JavascriptUser //convertimos el objeto User a un objeto JavascriptUser
        {
            ID = CurrentUser.ID,
            Nombre = CurrentUser.Nombre,
            Apellido = CurrentUser.Apellido,
            Edad = CurrentUser.Edad,
            Sexo = CurrentUser.Sexo.ToString(),
            Email = CurrentUser.Email,
            Telefono = CurrentUser.Telefono,    
            Passwordseguro = CurrentUser.Passwordseguro,
            authorize = new Authorize() { Name = CurrentUser.Nombre, Password = CurrentUser.Passwordseguro },                
            Roles_idroles = CurrentUser.Roles_idroles
        };
        StateHasChanged();        
        await Task.CompletedTask;
    }
    
}