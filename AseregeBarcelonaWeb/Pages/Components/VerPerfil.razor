<div style="margin-top: 40px; padding-bottom: 20px;">
	<Multiavatar Width="128px" Height="128px" AvatarId="@MultiAvatarUserName" />
</div>
	


<MudText Typo="Typo.h2" @bind-Value="CurrentUser.Nombre" T="string" Label="Nombre"></MudText>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Nombre" HelperText="Max. 8 characters"
                                  @bind-Value="model.Username" For="@(() => model.Username)" />
                    <MudTextField Label="Apellido" HelperText="Max. 8 characters"
                                  @bind-Value="model.Username" For="@(() => model.Username)" />
                    <MudTextField Label="Edad" HelperText="Please, write a valid number" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Number" />
                    <MudTextField Label="Sexo" HelperText="Please, choose an option" Class="mt-3"
                                  @bind-Value="model.Username" For="@(() => model.Username)" InputType="InputType.Password" />
                    <MudTextField Label="Email" HelperText="Please, write a valid email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)" />
                    <MudTextField Label="Telefono" HelperText="Please, write a valid telephone" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)" InputType="InputType.Telephone" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Actualizar</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>
@code
{
    [Parameter] public User CurrentUser { get; set; }
    private string MultiAvatarUserName { get; set; } = "UKNOWN";
    
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.EmailAddress]
        public string Email { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        MultiAvatarUserName = CurrentUser.Nombre;
        await Task.CompletedTask;
    }
}