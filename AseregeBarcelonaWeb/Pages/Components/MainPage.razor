<CarousellStyles Image1="images/campnou.jpg" Image2="images/parc.jpg" Image3="images/cathedral.jpg" Image4="images/Montserrat.jpg" Image5="images/plazaEspaña.jpg"></CarousellStyles>

@if (!EditorEnabled)
{
    <MudFab OnClick="async(e) => await SeeText()" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" />
    <MudGrid>
        @foreach (Picture item in Pictures.ToArray())
        {
            string Text = $"{item.TextInfo}";
            <MudItem xs="12" sm="12" md="12" lg="6">

                <PictureCard Altered="parc güell" Image="@item.Data" Text="@Text" />
            </MudItem>                    
        }                
    </MudGrid>    
}
else
{
    <MudFab OnClick="async(e) => await SeeText()" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" />
    <InputFile OnChange="HandleSeleccionArchivo" multiple />
}



@code
{
    private bool EditorEnabled = false;    
    private List<Picture> Pictures = new List<Picture>();
    
    private async Task SeeText()
    {
        EditorEnabled = !EditorEnabled;
        StateHasChanged();
        await Task.CompletedTask;
    }
    protected override async Task OnInitializedAsync()
    {                
        Manager.MySQLManager manager = new Manager.MySQLManager();

        long count = await manager.SelectCountImages();        
        for (int i = 1; i < count+1; i++)
        {
            Picture  element = await manager.SelectPicturesByIDAsync(i);
            Pictures.Add(element);
        }
        await manager.DisposeAsync();

        await base.OnInitializedAsync();
    }

        
    private async Task HandleSeleccionArchivo(InputFileChangeEventArgs e)        
    {
        foreach (IBrowserFile file in e.GetMultipleFiles())
        {
            if (file.ContentType.StartsWith("image/"))
            {
                using (Manager.MySQLManager manager = new Manager.MySQLManager())
                {
                    using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
                    {
                        ms.Position = 0;
                        await file.OpenReadStream(8388608, default).CopyToAsync(ms);


                        ms.Position = 0;
                        DateTime Date = DateTime.Now;
                        //escribir en la base de datos el stream procesado en la RAM

                        Picture picture = new Picture()
                        {
                            Name = Manager.CryptographyManager.GenerateHash(Date.ToString(), file.Name),
                            Format = file.ContentType,
                            Date = file.LastModified.ToLocalTime().DateTime,
                            Data = Convert.ToBase64String(ms.ToArray()),
                            Authorize = new Authorize()
                            {
                                Name = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "Name"),
                                Password = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "Password")
                            }
                        };
                        await manager.InsertFile(picture);
                        await Task.CompletedTask;
                    }
                }
            }
        }
    }
}