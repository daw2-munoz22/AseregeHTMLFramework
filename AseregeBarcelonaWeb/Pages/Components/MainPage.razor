<style type="text/css">

    .bounceIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: bounceIn;
        animation-fill-mode: forwards;
    }

    .bounceOut {
        animation-duration: 0.5s;
        animation-name: bounceOut;
        animation-fill-mode: forwards;
    }

    .backInDown {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: backInDown;
        animation-fill-mode: forwards;
    }

    .backOutDown {
        animation-duration: 0.5s;
        animation-name: backOutDown;
        animation-fill-mode: forwards;
    }

    .rotateIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: rotateIn;
        animation-fill-mode: forwards;
    }

    .rotateOut {
        animation-duration: 0.5s;
        animation-name: rotateOut;
        animation-fill-mode: forwards;
    }
</style>

<MudCarousel Class="mud-width-full" Style="height:200px;" ShowArrows="true" @bind-SelectedIndex="selectedIndex" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" TData="object">
    @if(collection !=null)
    {
        foreach (Picture item in collection)    
        {
            <MudCarouselItem Transition="Transition.Slide" Color="@Color.Primary">        
                <div class="d-flex justify-center">
                    <MudImage
                        ObjectFit="ObjectFit.Fill"
                        Height="300" Width="1920"
                        Src="@item.Data" 
                        Alt="@item.TextInfo"
                        Elevation="25" 
                        Class="rounded-lg" />
                </div>           
            </MudCarouselItem>    
        }
    }
</MudCarousel>

@if (CurrentUser != null)
{    
    @if (CurrentUser.Roles_idroles == (int)UserRole.Administrator)
    {
        <MudPaper Elevation="25">
            <MudToolBar>
                <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Class="mr-5" />
                <MudIconButton OnClick="async(e) => await AddTab()" Icon="@Icons.Material.Outlined.Add" />
                <MudIconButton OnClick="async(e) => await SwapEditorMode()" Icon="@Icons.Material.Outlined.Edit" />
                <MudSpacer />
                <MudIconButton OnClick="async(e) => await RegisterData()" Icon="@Icons.Material.Outlined.PeopleAlt" />
                <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
            </MudToolBar>
        </MudPaper>        
    }
}

@if (collection == null || collection.Length < 1)
{
    <MudProgressLinear Color="Color.Error" Indeterminate="true" Class="my-7" />   
    <MudGrid>
    @for (int i = 0; i < 2; i++)
    {  
        <MudItem xs="12" sm="12" md="12" lg="6">
            <MudCard>        
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px"/>
                <MudCardContent>
                    <MudSkeleton Width="30%" Height="42px;" />
                    <MudSkeleton Width="80%" />
                    <MudSkeleton Width="100%" />
                </MudCardContent>
                <MudCardActions>
                    <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                    <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                </MudCardActions>
            </MudCard>
        </MudItem>        
    }      
    </MudGrid>
}
else
{        
    <MudGrid> 
        @foreach (Picture item in collection)
        {
            MarkupString Text = new MarkupString($"<h2>{System.Net.WebUtility.HtmlEncode(item.Title)}</h2><p>{System.Net.WebUtility.HtmlEncode(item.TextInfo)}</p>");
            <MudItem xs="12" sm="12" md="12" lg="6">
                <PictureCard Image="@item.Data" Text="@Text" />
                @if (EditorEnabled && CurrentUser.Roles_idroles == (int)UserRole.Administrator)            
                {                  
                    <MudPaper Elevation="25">
                        <MudToolBar>                          
                            <MudButton Class="mb-2 ml-4" Variant="Variant.Filled" OnClick="async (e) => await DeleteImage(item)" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
                        </MudToolBar/>
                    </MudPaper>                    
                }
            </MudItem>        
        }        
    </MudGrid>
}


@code
{
    [Parameter] public EventCallback<string> OnRegister { get; set; }
    private async Task RegisterData()
    {        
        await OnRegister.InvokeAsync("admin");
    }

    private bool EditorEnabled = false;       
    [Parameter] public User CurrentUser { get; set; }
    private int selectedIndex = 1;
    
    private Picture[] collection;

    private async Task SwapEditorMode()
    {
        EditorEnabled = !EditorEnabled;
        StateHasChanged();
        await Task.CompletedTask;
    }
    private async Task GetPicture()
    {
        collection = null;        
        Manager.MySQLManager manager = new Manager.MySQLManager();
        
        collection = await manager.SelectPicturesAsync();               

        await manager.DisposeAsync();

        selectedIndex = 1;
    }
    protected override async Task OnInitializedAsync()
    {
        await GetPicture();
        await base.OnInitializedAsync();
    }
    private async Task AddTab()
    {

        //abrir ventana dialogo
        DialogResult result = await DialogService.Show<AddPictureDialog>("Añadir Imagen", new DialogParameters() 
        { 
            {
                "CurrentUser", CurrentUser 
            }
        },
        new DialogOptions() 
        {
            CloseOnEscapeKey = true 
        }).Result;  

        await Task.CompletedTask;
        if (result.Canceled)
        {
            await GetPicture();
        }
    }

    private async Task DeleteImage(Picture item)
    {
        // Logic to delete the image
        // Example code:
        if (item != null)
        {
            using (Manager.MySQLManager manager = new Manager.MySQLManager())
            {
                // Delete the image from the database                                
                await manager.DeleteImageAsync(item.Id, item.Name);

                // Remove the image from the collection                               
            }              
            await GetPicture();
            StateHasChanged();
            await Task.CompletedTask;
        }
    }
}