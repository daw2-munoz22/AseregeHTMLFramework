@inherits LayoutComponentBase
<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout Style="background-color: #b5f3f3; ">
    <MudAppBar Class="pb-sm-2" style="background-color:black;" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudText Style="margin-left: 20px;" Typo="Typo.h5">Descubre Barcelona</MudText>
        <MudSpacer />
        <MudChipSet Class="d-none d-sm-block" @bind-SelectedChip="selected" SelectedValuesChanged="SelectedValuesChanged" Filter="true" Mandatory="true">

            <MudChip Value="0" Text="blue" Color="Color.Info">Home</MudChip>

            @if (currentUser != null)
            {
                @if (currentUser.Roles_idroles == (int)UserRole.Administrator || currentUser.Roles_idroles == (int)UserRole.User)
                {
                    <MudChip Value="1" Text="pink" Color="Color.Secondary">Transportes</MudChip>
                    <MudChip Value="2" Text="red" Color="Color.Error">Visitas</MudChip>
                }
            }

            <MudChip Value="3" Text="orange" Color="Color.Warning">Quienes somos</MudChip>

        </MudChipSet>	
        <MudMenu>

            <ActivatorContent>
              
                <Multiavatar Width="48px" Height="48px" AvatarId="@MultiAvatarUserName" />                
            </ActivatorContent>
            <ChildContent>                                                               
                @if (currentUser.Nombre == null)
                {                    
                    <MudMenuItem OnClick="@(async(e) => await RegisterAsync())" Icon="@Icons.Material.Filled.Login">Registrarse</MudMenuItem>
                    <MudMenuItem OnClick="@(async(e) => await AuthorizeAsync())" Icon="@Icons.Material.Filled.Login">Iniciar Sesión</MudMenuItem>
                }
                else
                {
                    <MudMenuItem OnClick="@(async(e) => await TravelTo("profile"))" Icon="@Icons.Material.Filled.Edit">Perfil</MudMenuItem>
                    <MudMenuItem OnClick="@(async(e) => await CloseSession())" Icon="@Icons.Material.Filled.Logout">Cerrar Sesión</MudMenuItem>
                }                                                                                                    
            </ChildContent>
        </MudMenu>

    </MudAppBar>
    <MudDrawer @bind-Open="ChangeSidebar" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Aserege Framework</MudText>
        </MudDrawerHeader>                
      
        <MudPaper Width="250px" Class="d-inline-flex py-3" Elevation="0">
            <MudNavMenu Class="mud-width-full">
                <MudText Typo="Typo.h6" Class="px-4">Barcelona Web</MudText>
                <MudDivider Class="my-2" />
                <MudNavLink Href="/swagger" Icon="@Icons.Material.Filled.Dashboard">Peticiones JSON</MudNavLink>
                <MudNavLink OnClick="@(async(e) => await TravelTo("blue"))" Icon="@Icons.Material.Filled.People" IconColor="Color.Info">Home</MudNavLink>
                    
                @if (currentUser != null)
                {
                    @if (currentUser.Roles_idroles == (int)UserRole.Administrator)
                    {
                        <MudNavLink OnClick="@(async(e) => await TravelTo("admin"))" Icon="@Icons.Material.Filled.People" IconColor="Color.Success">Panel de Administracion</MudNavLink>
                    }

                    @if (currentUser.Roles_idroles == (int)UserRole.Administrator || currentUser.Roles_idroles == (int)UserRole.User)
                    {
                        <MudNavLink OnClick="@(async(e) => await TravelTo("pink"))" Icon="@Icons.Material.Filled.People" IconColor="Color.Secondary">Transportes</MudNavLink>
                        <MudNavLink OnClick="@(async(e) => await TravelTo("red"))" Icon="@Icons.Material.Filled.People" IconColor="Color.Error">Visistas</MudNavLink>
                    }                      
                }                
                <MudNavLink OnClick="@(async(e) => await TravelTo("orange"))" Icon="@Icons.Material.Filled.People" IconColor="Color.Warning">Quienes Somos?</MudNavLink>
                
            </MudNavMenu>
        </MudPaper>

    </MudDrawer>
    <MudMainContent Class="px-4">     
        @switch (SelectedPage)
        {
        case "blue":
                <MainPage OnRegister="HandleEvent" CurrentUser="@currentUser"></MainPage>
                break;
            case "register":
                <Register OnRegister="HandleEvent"></Register>
                break;
        case "login":
                <MudPaper Class="pa-16 ma-2" Square="false" Elevation="3">
                    <MudTextField @bind-Value="Name" Label="Nombre de usuario" Variant="Variant.Text" />

                    <MudTextField @bind-Value="Password" Class="mt-2 pb-4 mb-4"
                          Label="Contraseña"
                          Variant="Variant.Text"
                          InputType="@PasswordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordInputIcon"
                          OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                    <MudLink OnClick="@(async(e) => await OnPasswordReset())" Typo="Typo.body2">Recuperar Contraseña</MudLink>
                    <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="async(e) => await LoginAsync()">Iniciar Sesión</MudButton>
                </MudPaper>
            break;
        case "pink":                 
            <Transportes CurrentUser="@currentUser"></Transportes>
            break;
        case "red":
                <Visitas CurrentUser="@currentUser"></Visitas>
            break;
        case "orange":
            <QuienesSomos></QuienesSomos>
            break;
        case "profile":
                <VerPerfil CurrentUser="@currentUser" OnRegister="HandleEvent"></VerPerfil>
                break;
            case "admin":
                if (currentUser.Roles_idroles == (int)UserRole.Administrator)
                {
                    <PanelAdministracion></PanelAdministracion>
                }
                else
                {
                    SelectedPage = "blue";
                }
                break;
        case "api":
            <Api></Api>
            break;
        default:                
            <MudProgressLinear Color="Color.Error" Indeterminate="true" Class="my-7" />            
            <MudText style="font-family: 'Quattrocento', serif;" Align="Align.Center" Typo="Typo.h4"></MudText>                              
            break;
        }
        
        <Footer></Footer>                
    </MudMainContent>
    
</MudLayout>
@code
{
    private async Task HandleEvent(string data)
    {
        SelectedPage = data;
        StateHasChanged();
        await Task.CompletedTask;
    }

    /// <summary>
    /// /ROUTER REAL PAGE
    /// </summary>
    bool ChangeSidebar = true;
    void DrawerToggle() => ChangeSidebar = !ChangeSidebar;
    public string SelectedPage { get; set; } = "Blue";

    private User currentUser = new User();
    private MudChip selected;            
    private string MultiAvatarUserName { get; set; } = "UKNOWN";


    private async Task OnVirtualClick(string id)   
    {     
        await TravelTo(id);           
        SelectedValuesChanged();
    }

    private void SelectedValuesChanged()
    {
        if (selected != null)
        {
            SelectedPage = selected.Text;
        }
        else
        {
            StateHasChanged();
            SelectedPage = "blue";            
        }
        StateHasChanged();
    }

    private async Task TravelTo(string page)
    {
        SelectedPage = page;
        await Task.CompletedTask;        
    }    
    private async Task AuthorizeAsync()
    {
        await TravelTo("login");      
        await Task.CompletedTask;
    }

    private async Task CloseSession()
    {
        string nombre = await jsRuntime.InvokeAsync<string>("localStorage.removeItem", "Name");
        string Password = await jsRuntime.InvokeAsync<string>("localStorage.removeItem", "Password");
        currentUser = new User();
        await RefreshPermisions();
        StateHasChanged();
    }      
    protected override async Task OnInitializedAsync()
    {        
        await TravelTo("blue");
    }

    private async Task RefreshPermisions()
    {
        if (currentUser.Nombre == null || currentUser.Passwordseguro == null)
        {
            MultiAvatarUserName = "UKNOWN";
            currentUser = new User();          
        }
        else
        {
            MultiAvatarUserName = currentUser.Nombre;
            currentUser.Nombre = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "Name");
            currentUser.Passwordseguro = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "Password");
        }
        await Task.CompletedTask;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {        
        await RefreshPermisions();
        StateHasChanged();

        await Task.CompletedTask;
    }

    private async Task RegisterAsync()
    {
        await TravelTo("register");
        await Task.CompletedTask;
    }




    /// <summary>
    /// /LOGIN CODE
    /// </summary>

    public string Name { get; set; } = "";
    public string Password { get; set; } = "";

    bool isShow = false;

    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        isShow = !isShow;
        switch (isShow)
        {
            case false:
                PasswordInputIcon = Icons.Material.Filled.Visibility;
                PasswordInput = InputType.Text;
                break;
            case true:
                PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
                PasswordInput = InputType.Password;
                break;
        }
    }
    //Esta funcion se encarga de validar el usuario logeado (comprovar si existe en la base de datos) de manera asincrona
    private async Task LoginAsync()
    {        
        //este authorize permite autenticar el usuario 
        //En el apartado del Password, genera el hash de la contraseña intruducida y comprueba si su valor corresponde a la de la base de datos
        //Si el usuario es valido (existe), alamacena en el localStorage el perfil
        Authorize authorize = new Authorize()                    
        {                                        
            Name = Name,                
            Password = CryptographyManager.GeneratePasswordHash(this.Password) 
        };

        Manager.MySQLManager manager = new MySQLManager();
        User userValidator = manager.GetUser(authorize);
        await manager.DisposeAsync();
        if (userValidator != null)
        {
            currentUser = userValidator;
            await jsRuntime.InvokeVoidAsync("localStorage.setItem", "Name", authorize.Name);
            await jsRuntime.InvokeVoidAsync("localStorage.setItem", "Password", authorize.Password);
            MultiAvatarUserName = currentUser.Nombre;
            await TravelTo("blue");
        }
        else
        {
            SnackbarService.Add("Usuario o contraseña erronios!.", Severity.Error);
        }

        StateHasChanged();
    }
    private async Task OnPasswordReset()
    {        
        DialogResult result = await DialogService.Show<PasswordRestoreDialog>("Recuperar contraseña", new DialogParameters() { }, new DialogOptions() { CloseOnEscapeKey = true }).Result;      
        await Task.CompletedTask;
    }
}   