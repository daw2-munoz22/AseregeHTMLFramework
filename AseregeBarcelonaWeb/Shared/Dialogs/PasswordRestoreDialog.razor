<MudDialog>
    <DialogContent>
        @if (CurrentPage > 0)
        {
            <MudTextField @bind-Value="ResetPasswordCode" 
                          Label="Codigo de Recuperación" 
                          Variant="Variant.Text" 
                          InputType="InputType.Password">Código de Recuperación
            </MudTextField>
            <MudTextField @bind-Value="Passwordseguro"
                          Label="Contraseña"
                          Variant="Variant.Text"
                          InputType="@PasswordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordInputIcon"
                          OnAdornmentClick="OnPasswordVisibleClick"
                          AdornmentAriaLabel="Mostrar contraseña">
            </MudTextField>
            <MudTextField @bind-Value="PasswordRepeat"
                          Label="Repite contraseña"
                          Variant="Variant.Text"
                          InputType="@PasswordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordInputIcon"
                          OnAdornmentClick="OnPasswordVisibleClick"
                          AdornmentAriaLabel="Mostrar contraseña">
            </MudTextField>     

            @if (PasswordRepeat == Passwordseguro && PasswordRepeat != null && Passwordseguro != null)
            {
                <MudProgressLinear Color="Color.Error" Size="Size.Medium" Value="@(CryptographyManager.GetPasswordSecurityScore(PasswordRepeat))" Class="my-7">
                    <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                        <b>@CryptographyManager.GetPasswordSecurityScore(PasswordRepeat)%</b>
                    </MudText>
                </MudProgressLinear>
            }
        }
        else
        {
            <MudTextField @bind-Value="ClientName"
                      Label="Nombre usuario"
                      Variant="Variant.Filled"
                      InputType="InputType.Text">
                Nombre usuario
            </MudTextField>

            <MudTextField @bind-Value="ClientEmail" 
                          Label="Correo electronico" 
                          Variant="Variant.Filled" 
                          InputType="InputType.Email">Correo electronico
            </MudTextField>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (CurrentPage > 0)
        {        
            @if (PasswordRepeat == Passwordseguro && !string.IsNullOrWhiteSpace(ResetPasswordCode))            
            {                    
                <MudButton Color="Color.Primary" OnClick="@(async(e) => await Submit())">Ok</MudButton>                    
            }
        }
        else
        {

            if (!string.IsNullOrWhiteSpace(ClientEmail) && !string.IsNullOrWhiteSpace(ClientName))
            {
                <MudButton Color="Color.Primary" OnClick="@(async(e) => await IncrementPage())">Siguiente</MudButton>
            }
        }

    </DialogActions>
</MudDialog>

@code
{
    private int CurrentPage { get; set; } = 0;    
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private bool isShow { get; set; } = false;
    private InputType PasswordInput { get; set; } = InputType.Password;
    string PasswordInputIcon { get; set; } = Icons.Material.Filled.Visibility;

    private string ResetPasswordCode { get; set; } = string.Empty;
    private string Passwordseguro { get; set; } = string.Empty;
    private string PasswordRepeat { get; set; } = string.Empty;
    private string ClientName { get; set; } = string.Empty;
    private string ClientEmail { get; set; } = string.Empty;

    private async Task IncrementPage()
    {        
        AseregeBarcelonaWeb.API.PasswordRestoreAPI API = new API.PasswordRestoreAPI();
        //intenta esto
        MailRestore mail = new MailRestore() { Email = ClientEmail, Nombre = ClientName };
        Microsoft.AspNetCore.Mvc.IActionResult state = await API.Post(mail);

        if (state is Microsoft.AspNetCore.Mvc.OkObjectResult)
        {
            CurrentPage++;
        }
        await Task.CompletedTask;
    }

    private async Task OnPasswordVisibleClick()
    {
        isShow = !isShow;
        switch (isShow)
        {
            case false:
                PasswordInputIcon = Icons.Material.Filled.Visibility;
                PasswordInput = InputType.Text;
                break;
            case true:
                PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
                PasswordInput = InputType.Password;
                break;
        }
        await Task.CompletedTask;
    }

    private async Task Submit()
    {
        if (Passwordseguro == PasswordRepeat && Passwordseguro.Length > 4 && PasswordRepeat.Length > 4)
        {
            MySQLManager result = new MySQLManager();
            List<User> userlist = await result.SelectUsersAsync();
            User usuarioFiltrado = userlist.FirstOrDefault(u => u.Email == ClientEmail);
            if (usuarioFiltrado.Passwordseguro == ResetPasswordCode)
            {
                await result.UpdateUserAsync(
                  usuarioFiltrado.Nombre,
                  usuarioFiltrado.Apellido,
                  usuarioFiltrado.Edad,
                  usuarioFiltrado.Sexo,
                  usuarioFiltrado.Email,
                  usuarioFiltrado.Telefono,
                  CryptographyManager.GeneratePasswordHash(Passwordseguro), (int)UserRole.User, usuarioFiltrado.ID);

                await result.DisposeAsync();
                await Task.CompletedTask;
                MudDialog.Close(DialogResult.Ok("OK"));
            }
            else
            {

                SnackbarService.Add("Clave erronia", Severity.Error);
                await result.DisposeAsync();
                await Task.CompletedTask;
            }

        }
        await Task.CompletedTask;
    }

    
    private async Task Cancel() 
    {
        MudDialog.Cancel();
        await Task.CompletedTask;
    }
}
